["^ ","~:output",["^ ","~:js","goog.provide('scherz.brightness');\ngoog.require('cljs.core');\ngoog.require('clojure.string');\ngoog.require('scherz.util');\nscherz.brightness.valid_direction_QMARK_ = (function scherz$brightness$valid_direction_QMARK_(direction){\nreturn ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(direction,new cljs.core.Keyword(null,\"asc\",\"asc\",356854569))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(direction,new cljs.core.Keyword(null,\"desc\",\"desc\",2093485764))));\n});\n/**\n * Sharpens or flattens a pitch based on direction.\n */\nscherz.brightness.shift_pitch = (function scherz$brightness$shift_pitch(direction,pitch){\nif(scherz.brightness.valid_direction_QMARK_(direction)){\n} else {\nthrow (new Error(\"Assert failed: (valid-direction? direction)\"));\n}\n\nvar pop_string = (function (s){\nreturn cljs.core.subs.cljs$core$IFn$_invoke$arity$3(s,(0),(cljs.core.count(s) - (1)));\n});\nvar to_remove = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(direction,new cljs.core.Keyword(null,\"asc\",\"asc\",356854569)))?\"b\":\"#\");\nvar to_add = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(direction,new cljs.core.Keyword(null,\"asc\",\"asc\",356854569)))?\"#\":\"b\");\nif(clojure.string.ends_with_QMARK_(pitch,to_remove)){\nreturn pop_string(pitch);\n} else {\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(pitch),to_add].join('');\n}\n});\nscherz.brightness.base_circle = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"F\",\"C\",\"G\",\"D\",\"A\",\"E\",\"B\"], null);\nscherz.brightness.pitch_indexes = cljs.core.reduce_kv((function (acc,index,pitch){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(acc,cljs.core.PersistentArrayMap.createAsIfByAssoc([pitch,index]));\n}),cljs.core.PersistentArrayMap.EMPTY,scherz.brightness.base_circle);\n/**\n * Creates an infinite sequence of fifths (ascending or descending).\n */\nscherz.brightness.fifths = (function scherz$brightness$fifths(var_args){\nvar G__6073 = arguments.length;\nswitch (G__6073) {\ncase 1:\nreturn scherz.brightness.fifths.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn scherz.brightness.fifths.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nscherz.brightness.fifths.cljs$core$IFn$_invoke$arity$1 = (function (note){\nreturn scherz.brightness.fifths.cljs$core$IFn$_invoke$arity$2(note,new cljs.core.Keyword(null,\"asc\",\"asc\",356854569));\n});\n\nscherz.brightness.fifths.cljs$core$IFn$_invoke$arity$2 = (function (note,direction){\nif(scherz.brightness.valid_direction_QMARK_(direction)){\n} else {\nthrow (new Error(\"Assert failed: (valid-direction? direction)\"));\n}\n\nvar index_fn = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(direction,new cljs.core.Keyword(null,\"asc\",\"asc\",356854569)))?cljs.core.inc:cljs.core.dec);\nvar note_fn = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(scherz.brightness.shift_pitch,direction);\nvar new_index = (function (){var G__6074 = (function (){var G__6075 = cljs.core.first(note);\nreturn (scherz.brightness.pitch_indexes.cljs$core$IFn$_invoke$arity$1 ? scherz.brightness.pitch_indexes.cljs$core$IFn$_invoke$arity$1(G__6075) : scherz.brightness.pitch_indexes.call(null,G__6075));\n})();\nreturn (index_fn.cljs$core$IFn$_invoke$arity$1 ? index_fn.cljs$core$IFn$_invoke$arity$1(G__6074) : index_fn.call(null,G__6074));\n})();\nvar new_note = (function (){var G__6077 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var G__6079 = cljs.core.mod(new_index,(7));\nreturn (scherz.brightness.base_circle.cljs$core$IFn$_invoke$arity$1 ? scherz.brightness.base_circle.cljs$core$IFn$_invoke$arity$1(G__6079) : scherz.brightness.base_circle.call(null,G__6079));\n})()),cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.subs.cljs$core$IFn$_invoke$arity$2(note,(1)))].join('');\nvar fexpr__6076 = ((function (G__6077,index_fn,note_fn,new_index){\nreturn (function (p1__6071_SHARP_){\nif(((((0) <= new_index)) && ((new_index <= (6))))){\nreturn p1__6071_SHARP_;\n} else {\nreturn (note_fn.cljs$core$IFn$_invoke$arity$1 ? note_fn.cljs$core$IFn$_invoke$arity$1(p1__6071_SHARP_) : note_fn.call(null,p1__6071_SHARP_));\n}\n});})(G__6077,index_fn,note_fn,new_index))\n;\nreturn fexpr__6076(G__6077);\n})();\nreturn (new cljs.core.LazySeq(null,((function (index_fn,note_fn,new_index,new_note){\nreturn (function (){\nreturn cljs.core.cons(note,scherz.brightness.fifths.cljs$core$IFn$_invoke$arity$2(new_note,direction));\n});})(index_fn,note_fn,new_index,new_note))\n,null,null));\n});\n\nscherz.brightness.fifths.cljs$lang$maxFixedArity = 2;\n\n/**\n * Measures a pitch's brightness based on its position in the circle of fifths.\n *   More useful as a relative measure - arbitrarily F has a brightness of 0.\n */\nscherz.brightness.pitch_brightness = (function scherz$brightness$pitch_brightness(pitch){\nvar counts = cljs.core.frequencies(pitch);\nreturn (((function (){var G__6080 = cljs.core.first(pitch);\nreturn (scherz.brightness.pitch_indexes.cljs$core$IFn$_invoke$arity$1 ? scherz.brightness.pitch_indexes.cljs$core$IFn$_invoke$arity$1(G__6080) : scherz.brightness.pitch_indexes.call(null,G__6080));\n})() + ((7) * cljs.core.get.cljs$core$IFn$_invoke$arity$3(counts,\"#\",(0)))) + ((-7) * cljs.core.get.cljs$core$IFn$_invoke$arity$3(counts,\"b\",(0))));\n});\n/**\n * Assigns each note in a scale a level of brightness based on its position in the\n *   circle of fifths relative to the root, and adds them all up.  The tritone can be\n *   -6 or 6, and is inferred based on the brightness of the rest of the scale.\n */\nscherz.brightness.scale_brightness = (function scherz$brightness$scale_brightness(var_args){\nvar G__6083 = arguments.length;\nswitch (G__6083) {\ncase 2:\nreturn scherz.brightness.scale_brightness.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn scherz.brightness.scale_brightness.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nscherz.brightness.scale_brightness.cljs$core$IFn$_invoke$arity$2 = (function (scale,tonic){\nreturn (scherz.brightness.scale_brightness.cljs$core$IFn$_invoke$arity$1(scale) + scherz.brightness.pitch_brightness(tonic));\n});\n\nscherz.brightness.scale_brightness.cljs$core$IFn$_invoke$arity$1 = (function (scale){\nvar cumulative_intervals = cljs.core.reductions.cljs$core$IFn$_invoke$arity$2(cljs.core._PLUS_,(scherz.util.scale_intervals.cljs$core$IFn$_invoke$arity$1 ? scherz.util.scale_intervals.cljs$core$IFn$_invoke$arity$1(scale) : scherz.util.scale_intervals.call(null,scale)));\nvar note_ct = cljs.core.count(cumulative_intervals);\nvar interval_brightness = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(-5),(2),(-3),(4),(-1),(0),(1),(-4),(3),(-2),(5),(0)], null);\nvar scale_brightness = scherz.util.avg(cljs.core.map.cljs$core$IFn$_invoke$arity$2(interval_brightness,cumulative_intervals));\nif(cljs.core.truth_(cljs.core.some(((function (cumulative_intervals,note_ct,interval_brightness,scale_brightness){\nreturn (function (p1__6081_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((6),p1__6081_SHARP_);\n});})(cumulative_intervals,note_ct,interval_brightness,scale_brightness))\n,cumulative_intervals))){\nif((scale_brightness > (0))){\nreturn (scale_brightness + ((6) / note_ct));\n} else {\nreturn (scale_brightness - ((6) / note_ct));\n}\n} else {\nreturn scale_brightness;\n}\n});\n\nscherz.brightness.scale_brightness.cljs$lang$maxFixedArity = 2;\n\n/**\n * Generates a circle of fifths given a tonic and a scale.\n *   If the scale is bright the tritone is placed above the root, otherwise below.\n */\nscherz.brightness.circle_of_fifths = (function scherz$brightness$circle_of_fifths(var_args){\nvar G__6085 = arguments.length;\nswitch (G__6085) {\ncase 1:\nreturn scherz.brightness.circle_of_fifths.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn scherz.brightness.circle_of_fifths.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nscherz.brightness.circle_of_fifths.cljs$core$IFn$_invoke$arity$1 = (function (tonic){\nreturn scherz.brightness.circle_of_fifths.cljs$core$IFn$_invoke$arity$2(tonic,new cljs.core.Keyword(null,\"major\",\"major\",-27376078));\n});\n\nscherz.brightness.circle_of_fifths.cljs$core$IFn$_invoke$arity$2 = (function (tonic,scale){\nvar bright_QMARK_ = (scherz.brightness.scale_brightness.cljs$core$IFn$_invoke$arity$1(scale) > (0));\nvar upper_arc = cljs.core.take.cljs$core$IFn$_invoke$arity$2(((bright_QMARK_)?(6):(5)),cljs.core.drop.cljs$core$IFn$_invoke$arity$2((1),scherz.brightness.fifths.cljs$core$IFn$_invoke$arity$1(tonic)));\nvar lower_arc = cljs.core.take.cljs$core$IFn$_invoke$arity$2(((bright_QMARK_)?(6):(7)),scherz.brightness.fifths.cljs$core$IFn$_invoke$arity$2(tonic,new cljs.core.Keyword(null,\"desc\",\"desc\",2093485764)));\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(upper_arc,lower_arc);\n});\n\nscherz.brightness.circle_of_fifths.cljs$lang$maxFixedArity = 2;\n\n/**\n * Returns all pitches in a scale based on the circle of fifths.\n *   (pitch-scale :C :locrian) -> [:C :Db :Eb :F :Gb :Ab :Bb]\n */\nscherz.brightness.pitch_scale = (function scherz$brightness$pitch_scale(tonic,scale){\nvar circle = cljs.core.vec(scherz.brightness.circle_of_fifths.cljs$core$IFn$_invoke$arity$2(tonic,scale));\nvar root_index = circle.indexOf(tonic);\nvar intervals = (scherz.util.scale_intervals.cljs$core$IFn$_invoke$arity$1 ? scherz.util.scale_intervals.cljs$core$IFn$_invoke$arity$1(scale) : scherz.util.scale_intervals.call(null,scale));\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tonic], null),cljs.core.pop(cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(circle,cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (circle,root_index,intervals){\nreturn (function (p1__6086_SHARP_){\nreturn cljs.core.mod(((p1__6086_SHARP_ * (7)) + root_index),(12));\n});})(circle,root_index,intervals))\n,cljs.core.reductions.cljs$core$IFn$_invoke$arity$2(cljs.core._PLUS_,intervals)))));\n});\n/**\n * (pitch-chord :C :major [0 2 4] 2) -> (:D :F :A)\n */\nscherz.brightness.pitch_chord = (function scherz$brightness$pitch_chord(tonic,scale,chord_shape,degree){\nvar G__6089 = cljs.core.take.cljs$core$IFn$_invoke$arity$2((cljs.core.last(chord_shape) + (1)),cljs.core.drop.cljs$core$IFn$_invoke$arity$2((degree - (1)),cljs.core.cycle(scherz.brightness.pitch_scale(tonic,scale))));\nvar fexpr__6088 = ((function (G__6089){\nreturn (function (p1__6087_SHARP_){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.vec(p1__6087_SHARP_),chord_shape);\n});})(G__6089))\n;\nreturn fexpr__6088(G__6089);\n});\n/**\n * Computes how much more 'colorful' chords are in relation to each other.\n * \n *   The C Major triad's brightest note is E and the G major triad's brightest is B. \n *   B is one level brighter than E in the circle of fifths, so\n *   '(:G :B :E) adds one unit of color to '(:C :E :G).\n */\nscherz.brightness.chord_color = (function scherz$brightness$chord_color(source_pitches,target_pitches){\nvar chord_brightness = (function (pitches){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(scherz.brightness.pitch_brightness,pitches);\n});\nvar brightest_note = ((function (chord_brightness){\nreturn (function (pitches){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.max,chord_brightness(pitches));\n});})(chord_brightness))\n;\nvar darkest_note = ((function (chord_brightness,brightest_note){\nreturn (function (pitches){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.min,chord_brightness(pitches));\n});})(chord_brightness,brightest_note))\n;\nvar brightness_difference = (brightest_note(target_pitches) - brightest_note(source_pitches));\nvar darkness_difference = (darkest_note(source_pitches) - darkest_note(target_pitches));\nreturn ((function (){var x__4219__auto__ = brightness_difference;\nvar y__4220__auto__ = (0);\nreturn ((x__4219__auto__ > y__4220__auto__) ? x__4219__auto__ : y__4220__auto__);\n})() + (function (){var x__4219__auto__ = darkness_difference;\nvar y__4220__auto__ = (0);\nreturn ((x__4219__auto__ > y__4220__auto__) ? x__4219__auto__ : y__4220__auto__);\n})());\n});\nscherz.brightness.fifths_above = (function scherz$brightness$fifths_above(n,root){\nreturn cljs.core.first(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(scherz.util.abs(n),scherz.brightness.fifths.cljs$core$IFn$_invoke$arity$2(root,(((n > (0)))?new cljs.core.Keyword(null,\"asc\",\"asc\",356854569):new cljs.core.Keyword(null,\"desc\",\"desc\",2093485764)))));\n});\nscherz.brightness.fifths_between = (function scherz$brightness$fifths_between(source_pitch,target_pitch){\nvar diff = (scherz.brightness.pitch_brightness(target_pitch) - scherz.brightness.pitch_brightness(source_pitch));\nvar direction = (((diff > (0)))?new cljs.core.Keyword(null,\"asc\",\"asc\",356854569):new cljs.core.Keyword(null,\"desc\",\"desc\",2093485764));\nreturn cljs.core.take.cljs$core$IFn$_invoke$arity$2((diff + (1)),scherz.brightness.fifths.cljs$core$IFn$_invoke$arity$2(source_pitch,direction));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","scherz/brightness.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",22],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$scherz.brightness","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^G","~$scherz.util","^H","~$cljs.core","^I","~$goog","^J"],"~:seen",["^@",["~:require"]],"~:uses",["^ ","~$ends-with?","^G","~$abs","^H","~$avg","^H","~$scale-intervals","^H","~$floor","^H"],"~:require-macros",["^ ","^I","^I"],"~:form",["~#list",["~$ns","^B",["^U",["^L",["^G","~:refer",["^N"]]]],["^U",["^L",["^H","^W",["^O","^P","^Q","^R"]]]]]],"~:flags",["^ ","^L",["^@",[]]],"~:js-deps",["^ "],"~:deps",["^J","^I","^G","^H"]],"^D","^B","~:resource-id",["~:shadow.build.classpath/resource","scherz/brightness.cljc"],"~:compiled-at",1566688691177,"~:resource-name","scherz/brightness.cljc","~:warnings",[],"~:source","(ns scherz.brightness\n  (:require [clojure.string :refer [ends-with?]])\n  (:require [scherz.util :refer [abs avg scale-intervals floor]]))\n\n(defn valid-direction? [direction]\n  (or (= direction :asc) (= direction :desc)))\n\n(defn- shift-pitch\n  \"Sharpens or flattens a pitch based on direction.\"\n  ([direction pitch]\n   {:pre [(valid-direction? direction)]}   \n   (let [pop-string (fn [s] (subs s 0 (- (count s) 1)))\n         to-remove (if (= direction :asc) \"b\" \"#\")\n         to-add (if (= direction :asc) \"#\" \"b\")]\n     (if (ends-with? pitch to-remove)\n       (pop-string pitch)\n       (str pitch to-add)))))\n\n(def base-circle [\\F \\C \\G \\D \\A \\E \\B])\n\n(def pitch-indexes\n  (reduce-kv (fn [acc index pitch] (into acc {pitch index}))\n             {} base-circle))\n\n(defn fifths\n  \"Creates an infinite sequence of fifths (ascending or descending).\"\n  ([note] (fifths note :asc))\n  ([note direction]\n   {:pre [(valid-direction? direction)]}   \n   (let [index-fn (if (= direction :asc) inc dec)\n         note-fn (partial shift-pitch direction)\n         new-index (index-fn (pitch-indexes (first note)))\n         new-note (-> (mod new-index 7) base-circle (str (subs note 1))\n                      (#(if (<= 0 new-index 6) % (note-fn %))))]\n     (lazy-seq (cons note (fifths new-note direction))))))\n\n(defn pitch-brightness\n  \"Measures a pitch's brightness based on its position in the circle of fifths.\n  More useful as a relative measure - arbitrarily F has a brightness of 0.\"\n  [pitch]\n  (let [counts (frequencies pitch)]\n    (+ (pitch-indexes (first pitch))\n       (* 7 (get counts \\# 0))\n       (* -7 (get counts \\b 0)))))\n\n(defn scale-brightness\n  \"Assigns each note in a scale a level of brightness based on its position in the\n  circle of fifths relative to the root, and adds them all up.  The tritone can be\n  -6 or 6, and is inferred based on the brightness of the rest of the scale.\"\n  ([scale tonic] (+ (scale-brightness scale) (pitch-brightness tonic)))\n  ([scale]\n   (let [cumulative-intervals (reductions + (scale-intervals scale))\n         note-ct (count cumulative-intervals)\n         interval-brightness [0 -5 2 -3 4 -1 0 1 -4 3 -2 5 0]\n         scale-brightness (avg (map interval-brightness\n                                    cumulative-intervals))]\n     (if (some #(= 6 %) cumulative-intervals)\n       (if (pos? scale-brightness)\n         (+ scale-brightness (/ 6 note-ct))\n         (- scale-brightness (/ 6 note-ct)))\n       scale-brightness))))\n\n(defn circle-of-fifths\n  \"Generates a circle of fifths given a tonic and a scale.\n  If the scale is bright the tritone is placed above the root, otherwise below.\"\n  ([tonic] (circle-of-fifths tonic :major))\n  ([tonic scale]\n   (let [bright? (pos? (scale-brightness scale))\n         upper-arc (take (if bright? 6 5)\n                         (drop 1 (fifths tonic)))\n         lower-arc (take (if bright? 6 7)\n                         (fifths tonic :desc))]\n     (into upper-arc lower-arc))))\n\n(defn pitch-scale\n  \"Returns all pitches in a scale based on the circle of fifths.\n  (pitch-scale :C :locrian) -> [:C :Db :Eb :F :Gb :Ab :Bb]\"\n  [tonic scale]\n  (let [circle (vec (circle-of-fifths tonic scale))\n        root-index (.indexOf circle tonic)\n        intervals (scale-intervals scale)]\n    (->> intervals\n         (reductions +)\n         (map #(-> % (* 7) (+ root-index) (mod 12)))\n         (mapv circle)\n         pop\n         (into [tonic]))))\n\n(defn pitch-chord\n  \"(pitch-chord :C :major [0 2 4] 2) -> (:D :F :A)\"\n  [tonic scale chord-shape degree]\n  (->> (pitch-scale tonic scale)\n       cycle\n       (drop (dec degree))\n       (take (inc (last chord-shape)))\n       (#(map (vec %) chord-shape))))\n\n(defn chord-color\n  \"Computes how much more 'colorful' chords are in relation to each other.\n\n  The C Major triad's brightest note is E and the G major triad's brightest is B. \n  B is one level brighter than E in the circle of fifths, so\n  '(:G :B :E) adds one unit of color to '(:C :E :G).\"\n  [source-pitches target-pitches]\n  (let [chord-brightness (fn [pitches]\n                           (map pitch-brightness pitches))\n        brightest-note (fn [pitches]\n                         (apply max (chord-brightness pitches)))\n        darkest-note (fn [pitches]\n                       (apply min (chord-brightness pitches)))\n        brightness-difference (- (brightest-note target-pitches)\n                                 (brightest-note source-pitches))\n        darkness-difference (- (darkest-note source-pitches)\n                               (darkest-note target-pitches))]\n    (+ (max brightness-difference 0)\n       (max darkness-difference 0))))\n\n(defn fifths-above\n  [n root]\n  (->> (if (pos? n) :asc :desc)\n       (fifths root)\n       (drop (abs n))\n       first))\n\n(defn fifths-between [source-pitch target-pitch]\n  (let [diff (- (pitch-brightness target-pitch)\n                (pitch-brightness source-pitch))\n        direction (if (pos? diff) :asc :desc)]\n    (take (inc diff) (fifths source-pitch direction))))\n","~:reader-features",["^@",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["scherz.brightness/valid-direction?","direction","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","js/Error","scherz.brightness/shift-pitch","pitch","pop-string","s","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core/count","to-remove","to-add","clojure.string/ends-with?","scherz.brightness/base-circle","scherz.brightness/pitch-indexes","cljs.core/reduce-kv","acc","index","cljs.core.into.cljs$core$IFn$_invoke$arity$2","var_args","G__6073","scherz.brightness/fifths","note","scherz.brightness.fifths.cljs$core$IFn$_invoke$arity$2","index-fn","cljs.core/inc","cljs.core/dec","note-fn","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","new-index","G__6074","G__6075","cljs.core/first","new-note","cljs.core/mod","G__6079","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","G__6077","fexpr__6076","p1__6071#","cljs.core/LazySeq","cljs.core/cons","scherz.brightness/pitch-brightness","counts","cljs.core/frequencies","G__6080","cljs.core.get.cljs$core$IFn$_invoke$arity$3","G__6083","scherz.brightness/scale-brightness","scale","tonic","scherz.brightness.scale_brightness.cljs$core$IFn$_invoke$arity$1","cumulative-intervals","cljs.core.reductions.cljs$core$IFn$_invoke$arity$2","cljs.core/+","scherz.util/scale-intervals","note-ct","interval-brightness","scale-brightness","scherz.util/avg","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p1__6081#","cljs.core/some","G__6085","scherz.brightness/circle-of-fifths","scherz.brightness.circle_of_fifths.cljs$core$IFn$_invoke$arity$2","bright?","upper-arc","cljs.core.take.cljs$core$IFn$_invoke$arity$2","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","scherz.brightness.fifths.cljs$core$IFn$_invoke$arity$1","lower-arc","scherz.brightness/pitch-scale","circle","cljs.core/vec","root-index","intervals","p1__6086#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core/pop","scherz.brightness/pitch-chord","chord-shape","degree","cljs.core/cycle","cljs.core/last","G__6089","fexpr__6088","p1__6087#","scherz.brightness/chord-color","source-pitches","target-pitches","chord-brightness","pitches","brightest-note","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/max","darkest-note","cljs.core/min","brightness-difference","darkness-difference","x__4219__auto__","y__4220__auto__","scherz.brightness/fifths-above","n","root","scherz.util/abs","scherz.brightness/fifths-between","source-pitch","target-pitch","diff"]]],"~:cache-keys",["~#cmap",[["^10","goog/math/math.js"],[1565449510000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^@",[]],"~:deps-syms",["^J","~$goog.array","~$goog.asserts"]]],["^10","goog/array/array.js"],[1565449510000,"^1=",["^ ","^1>",null,"^1?",["^@",[]],"^1@",["^J","^1B"]]],["^10","goog/debug/error.js"],[1565449510000,"^1=",["^ ","^1>",null,"^1?",["^@",[]],"^1@",["^J"]]],["^10","goog/dom/nodetype.js"],[1565449510000,"^1=",["^ ","^1>",null,"^1?",["^@",[]],"^1@",["^J"]]],["^10","goog/object/object.js"],[1565449510000,"^1=",["^ ","^1>",null,"^1?",["^@",[]],"^1@",["^J"]]],"~:SHADOW-TIMESTAMP",[1565449511000,1565449509000],["^10","goog/math/long.js"],[1565449510000,"^1=",["^ ","^1>",null,"^1?",["^@",[]],"^1@",["^J","^1B","~$goog.reflect"]]],["^10","goog/string/internal.js"],[1565449510000,"^1=",["^ ","^1>",null,"^1?",["^@",[]],"^1@",["^J"]]],["^10","goog/functions/functions.js"],[1565449510000,"^1=",["^ ","^1>",null,"^1?",["^@",[]],"^1@",["^J"]]],["^10","goog/structs/map.js"],[1565449510000,"^1=",["^ ","^1>",null,"^1?",["^@",[]],"^1@",["^J","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^10","goog/asserts/asserts.js"],[1565449510000,"^1=",["^ ","^1>",null,"^1?",["^@",[]],"^1@",["^J","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^10","goog/uri/uri.js"],[1565449510000,"^1=",["^ ","^1>",null,"^1?",["^@",[]],"^1@",["^J","^1A","^1B","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^10","goog/base.js"],[1565449510000,"^1=",["^ ","^1>",null,"^1?",["^@",[]],"^1@",[]]],["^10","goog/structs/structs.js"],[1565449510000,"^1=",["^ ","^1>",null,"^1?",["^@",[]],"^1@",["^J","^1A","~$goog.object"]]],["^10","clojure/string.cljs"],[1565449509000,"^1=",["^ ","^1>",null,"^1?",["^@",[]],"^1@",["^J","^I","^1I","~$goog.string.StringBuffer"]]],["^10","goog/string/string.js"],[1565449510000,"^1=",["^ ","^1>",null,"^1?",["^@",[]],"^1@",["^J","~$goog.string.internal"]]],["^10","goog/reflect/reflect.js"],[1565449510000,"^1=",["^ ","^1>",null,"^1?",["^@",[]],"^1@",["^J"]]],["^10","goog/string/stringbuffer.js"],[1565449510000,"^1=",["^ ","^1>",null,"^1?",["^@",[]],"^1@",["^J"]]],["^10","goog/iter/iter.js"],[1565449510000,"^1=",["^ ","^1>",null,"^1?",["^@",[]],"^1@",["^J","^1A","^1B","~$goog.functions","~$goog.math"]]],["^10","scherz/brightness.cljc"],[1566688545000,"^1=",["^ ","^1>",null,"^1?",["^@",[]],"^1@",["^J","^I","^G","^H"]]],["^10","cljs/core.cljs"],[1565449509000,"^1=",["^ ","^1>",null,"^1?",["^@",[]],"^1@",["~$goog.math.Long","~$goog.math.Integer","^1I","^1O","^1A","~$goog.Uri","^1P"]]],["^10","goog/math/integer.js"],[1565449510000,"^1=",["^ ","^1>",null,"^1?",["^@",[]],"^1@",["^J"]]],["^10","goog/uri/utils.js"],[1565449510000,"^1=",["^ ","^1>",null,"^1?",["^@",[]],"^1@",["^J","^1A","^1B","^1I"]]],["^10","scherz/util.cljc"],[1566685118000,"^1=",["^ ","^1>",null,"^1?",["^@",[]],"^1@",["^J","^I"]]]]],"~:clj-info",["^ ","jar:file:/Users/mochi/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1565449508000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1565449509000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1565449509000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1565449509000,"jar:file:/Users/mochi/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1565449508000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1565449509000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1565449509000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1565449508000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1565449509000,"jar:file:/Users/mochi/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1565449508000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1565449508000,"jar:file:/Users/mochi/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1565449508000,"jar:file:/Users/mochi/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1565449508000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1565449509000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1565449509000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1565449508000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1565449508000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1565449509000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1565449509000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1565449508000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1565449508000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1565449509000,"jar:file:/Users/mochi/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1565033122000,"jar:file:/Users/mochi/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1565449508000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","scherz/brightness.cljc","^7",1,"^8",5,"^9",1,"^:",22],"^;",["^ ","^<","^="],"^>",null,"^?",["^@",[]],"^A","^B","^E",null,"^F",["^ ","^G","^G","^H","^H","^I","^I","^J","^J"],"^K",["^@",["^L"]],"~:shadow/js-access-global",["^@",["Error"]],"^M",["^ ","^N","^G","^O","^H","^P","^H","^Q","^H","^R","^H"],"~:defs",["^ ","~$fifths-between",["^ ","~:protocol-inline",null,"^5",["^ ","^6","scherz/brightness.cljc","^7",125,"^8",7,"^9",125,"^:",21,"~:arglists",["^U",["~$quote",["^U",[["~$source-pitch","~$target-pitch"]]]]]],"^A","~$scherz.brightness/fifths-between","^6","scherz/brightness.cljc","^:",21,"~:method-params",["^U",[["^2K","^2L"]]],"~:protocol-impl",null,"~:arglists-meta",["^U",[null,null]],"^8",1,"~:variadic?",false,"^7",125,"~:ret-tag","~$cljs.core/LazySeq","^9",125,"~:max-fixed-arity",2,"~:fn-var",true,"^2I",["^U",["^2J",["^U",[["^2K","^2L"]]]]]],"~$pitch-brightness",["^ ","^2H",null,"^5",["^ ","^6","scherz/brightness.cljc","^7",37,"^8",7,"^9",37,"^:",23,"^2I",["^U",["^2J",["^U",[["~$pitch"]]]]],"~:doc","Measures a pitch's brightness based on its position in the circle of fifths.\n  More useful as a relative measure - arbitrarily F has a brightness of 0."],"^A","~$scherz.brightness/pitch-brightness","^6","scherz/brightness.cljc","^:",23,"^2N",["^U",[["^2W"]]],"^2O",null,"^2P",["^U",[null,null]],"^8",1,"^2Q",false,"^7",37,"^2R","~$number","^9",37,"^2T",1,"^2U",true,"^2I",["^U",["^2J",["^U",[["^2W"]]]]],"^2X","Measures a pitch's brightness based on its position in the circle of fifths.\n  More useful as a relative measure - arbitrarily F has a brightness of 0."],"~$fifths-above",["^ ","^2H",null,"^5",["^ ","^6","scherz/brightness.cljc","^7",118,"^8",7,"^9",118,"^:",19,"^2I",["^U",["^2J",["^U",[["~$n","~$root"]]]]]],"^A","~$scherz.brightness/fifths-above","^6","scherz/brightness.cljc","^:",19,"^2N",["^U",[["~$n","^30"]]],"^2O",null,"^2P",["^U",[null,null]],"^8",1,"^2Q",false,"^7",118,"^2R",["^@",["~$any","~$clj-nil"]],"^9",118,"^2T",2,"^2U",true,"^2I",["^U",["^2J",["^U",[["~$n","^30"]]]]]],"~$pitch-scale",["^ ","^2H",null,"^5",["^ ","^6","scherz/brightness.cljc","^7",75,"^8",7,"^9",75,"^:",18,"^2I",["^U",["^2J",["^U",[["~$tonic","~$scale"]]]]],"^2X","Returns all pitches in a scale based on the circle of fifths.\n  (pitch-scale :C :locrian) -> [:C :Db :Eb :F :Gb :Ab :Bb]"],"^A","~$scherz.brightness/pitch-scale","^6","scherz/brightness.cljc","^:",18,"^2N",["^U",[["^35","^36"]]],"^2O",null,"^2P",["^U",[null,null]],"^8",1,"^2Q",false,"^7",75,"^2R",["^@",[null,"~$clj","^32"]],"^9",75,"^2T",2,"^2U",true,"^2I",["^U",["^2J",["^U",[["^35","^36"]]]]],"^2X","Returns all pitches in a scale based on the circle of fifths.\n  (pitch-scale :C :locrian) -> [:C :Db :Eb :F :Gb :Ab :Bb]"],"~$pitch-chord",["^ ","^2H",null,"^5",["^ ","^6","scherz/brightness.cljc","^7",89,"^8",7,"^9",89,"^:",18,"^2I",["^U",["^2J",["^U",[["^35","^36","~$chord-shape","~$degree"]]]]],"^2X","(pitch-chord :C :major [0 2 4] 2) -> (:D :F :A)"],"^A","~$scherz.brightness/pitch-chord","^6","scherz/brightness.cljc","^:",18,"^2N",["^U",[["^35","^36","^3:","^3;"]]],"^2O",null,"^2P",["^U",[null,null]],"^8",1,"^2Q",false,"^7",89,"^2R","^2S","^9",89,"^2T",4,"^2U",true,"^2I",["^U",["^2J",["^U",[["^35","^36","^3:","^3;"]]]]],"^2X","(pitch-chord :C :major [0 2 4] 2) -> (:D :F :A)"],"~$fifths",["^ ","^2H",null,"^5",["^ ","^6","scherz/brightness.cljc","^7",25,"^8",7,"^9",25,"^:",13,"^2I",["^U",["^2J",["^U",[["~$note"],["^3>","~$direction"]]]]],"^2X","Creates an infinite sequence of fifths (ascending or descending).","~:top-fn",["^ ","^2Q",false,"~:fixed-arity",2,"^2T",2,"^2N",["^U",[["^3>"],["^3>","^3?"]]],"^2I",["^U",[["^3>"],["^3>","^3?"]]],"^2P",["^U",[null,null]]]],"^A","~$scherz.brightness/fifths","^6","scherz/brightness.cljc","^:",13,"^3@",["^ ","^2Q",false,"^3A",2,"^2T",2,"^2N",["^U",[["^3>"],["^3>","^3?"]]],"^2I",["^U",[["^3>"],["^3>","^3?"]]],"^2P",["^U",[null,null]]],"^2N",["^U",[["^3>"],["^3>","^3?"]]],"^2O",null,"^3A",2,"^2P",["^U",[null,null]],"^8",1,"^2Q",false,"~:methods",[["^ ","^3A",1,"^2Q",false,"~:tag","^32"],["^ ","^3A",2,"^2Q",false,"^3D","^2S"]],"^7",25,"^9",25,"^2T",2,"^2U",true,"^2I",["^U",[["^3>"],["^3>","^3?"]]],"^2X","Creates an infinite sequence of fifths (ascending or descending)."],"~$chord-color",["^ ","^2H",null,"^5",["^ ","^6","scherz/brightness.cljc","^7",98,"^8",7,"^9",98,"^:",18,"^2I",["^U",["^2J",["^U",[["~$source-pitches","~$target-pitches"]]]]],"^2X","Computes how much more 'colorful' chords are in relation to each other.\n\n  The C Major triad's brightest note is E and the G major triad's brightest is B. \n  B is one level brighter than E in the circle of fifths, so\n  '(:G :B :E) adds one unit of color to '(:C :E :G)."],"^A","~$scherz.brightness/chord-color","^6","scherz/brightness.cljc","^:",18,"^2N",["^U",[["^3F","^3G"]]],"^2O",null,"^2P",["^U",[null,null]],"^8",1,"^2Q",false,"^7",98,"^2R","^2Z","^9",98,"^2T",2,"^2U",true,"^2I",["^U",["^2J",["^U",[["^3F","^3G"]]]]],"^2X","Computes how much more 'colorful' chords are in relation to each other.\n\n  The C Major triad's brightest note is E and the G major triad's brightest is B. \n  B is one level brighter than E in the circle of fifths, so\n  '(:G :B :E) adds one unit of color to '(:C :E :G)."],"~$base-circle",["^ ","^A","~$scherz.brightness/base-circle","^6","scherz/brightness.cljc","^7",19,"^8",1,"^9",19,"^:",17,"^5",["^ ","^6","scherz/brightness.cljc","^7",19,"^8",6,"^9",19,"^:",17],"^3D","~$cljs.core/IVector"],"~$pitch-indexes",["^ ","^A","~$scherz.brightness/pitch-indexes","^6","scherz/brightness.cljc","^7",21,"^8",1,"^9",21,"^:",19,"^5",["^ ","^6","scherz/brightness.cljc","^7",21,"^8",6,"^9",21,"^:",19],"^3D",["^@",[null,"^32"]]],"~$scale-brightness",["^ ","^2H",null,"^5",["^ ","^6","scherz/brightness.cljc","^7",46,"^8",7,"^9",46,"^:",23,"^2I",["^U",["^2J",["^U",[["^36","^35"],["^36"]]]]],"^2X","Assigns each note in a scale a level of brightness based on its position in the\n  circle of fifths relative to the root, and adds them all up.  The tritone can be\n  -6 or 6, and is inferred based on the brightness of the rest of the scale.","^3@",["^ ","^2Q",false,"^3A",2,"^2T",2,"^2N",["^U",[["^36","^35"],["^36"]]],"^2I",["^U",[["^36","^35"],["^36"]]],"^2P",["^U",[null,null]]]],"^A","~$scherz.brightness/scale-brightness","^6","scherz/brightness.cljc","^:",23,"^3@",["^ ","^2Q",false,"^3A",2,"^2T",2,"^2N",["^U",[["^36","^35"],["^36"]]],"^2I",["^U",[["^36","^35"],["^36"]]],"^2P",["^U",[null,null]]],"^2N",["^U",[["^36","^35"],["^36"]]],"^2O",null,"^3A",2,"^2P",["^U",[null,null]],"^8",1,"^2Q",false,"^3C",[["^ ","^3A",2,"^2Q",false,"^3D","^2Z"],["^ ","^3A",1,"^2Q",false,"^3D",["^@",["^2Z","^33"]]]],"^7",46,"^9",46,"^2T",2,"^2U",true,"^2I",["^U",[["^36","^35"],["^36"]]],"^2X","Assigns each note in a scale a level of brightness based on its position in the\n  circle of fifths relative to the root, and adds them all up.  The tritone can be\n  -6 or 6, and is inferred based on the brightness of the rest of the scale."],"~$shift-pitch",["^ ","^2H",null,"^5",["^ ","^6","scherz/brightness.cljc","^7",8,"^8",8,"^9",8,"^:",19,"~:private",true,"^2I",["^U",["^2J",["^U",[["^3?","^2W"]]]]],"^2X","Sharpens or flattens a pitch based on direction."],"^3Q",true,"^A","~$scherz.brightness/shift-pitch","^6","scherz/brightness.cljc","^:",19,"^2N",["^U",[["^3?","^2W"]]],"^2O",null,"^2P",["^U",[null,null]],"^8",1,"^2Q",false,"^7",8,"^2R",["^@",["^32","~$string"]],"^9",8,"^2T",2,"^2U",true,"^2I",["^U",["^2J",["^U",[["^3?","^2W"]]]]],"^2X","Sharpens or flattens a pitch based on direction."],"~$circle-of-fifths",["^ ","^2H",null,"^5",["^ ","^6","scherz/brightness.cljc","^7",63,"^8",7,"^9",63,"^:",23,"^2I",["^U",["^2J",["^U",[["^35"],["^35","^36"]]]]],"^2X","Generates a circle of fifths given a tonic and a scale.\n  If the scale is bright the tritone is placed above the root, otherwise below.","^3@",["^ ","^2Q",false,"^3A",2,"^2T",2,"^2N",["^U",[["^35"],["^35","^36"]]],"^2I",["^U",[["^35"],["^35","^36"]]],"^2P",["^U",[null,null]]]],"^A","~$scherz.brightness/circle-of-fifths","^6","scherz/brightness.cljc","^:",23,"^3@",["^ ","^2Q",false,"^3A",2,"^2T",2,"^2N",["^U",[["^35"],["^35","^36"]]],"^2I",["^U",[["^35"],["^35","^36"]]],"^2P",["^U",[null,null]]],"^2N",["^U",[["^35"],["^35","^36"]]],"^2O",null,"^3A",2,"^2P",["^U",[null,null]],"^8",1,"^2Q",false,"^3C",[["^ ","^3A",1,"^2Q",false,"^3D","^32"],["^ ","^3A",2,"^2Q",false,"^3D",["^@",[null,"^38","^32"]]]],"^7",63,"^9",63,"^2T",2,"^2U",true,"^2I",["^U",[["^35"],["^35","^36"]]],"^2X","Generates a circle of fifths given a tonic and a scale.\n  If the scale is bright the tritone is placed above the root, otherwise below."],"~$valid-direction?",["^ ","^2H",null,"^5",["^ ","^6","scherz/brightness.cljc","^7",5,"^8",7,"^9",5,"^:",23,"^2I",["^U",["^2J",["^U",[["^3?"]]]]]],"^A","~$scherz.brightness/valid-direction?","^6","scherz/brightness.cljc","^:",23,"^2N",["^U",[["^3?"]]],"^2O",null,"^2P",["^U",[null,null]],"^8",1,"^2Q",false,"^7",5,"^2R","~$boolean","^9",5,"^2T",1,"^2U",true,"^2I",["^U",["^2J",["^U",[["^3?"]]]]]]],"^S",["^ ","^I","^I"],"~:cljs.analyzer/constants",["^ ","^K",["^@",["~:desc","~:asc","~:major"]],"~:order",["^3[","^3Z","^40"]],"^X",["^ ","^L",["^@",[]]],"^Y",["^ "],"^Z",["^J","^I","^G","^H"]],"^D","^B","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1<",[["^44","~:static-fns"],true,["^44","~:elide-asserts"],false,["^44","~:optimize-constants"],null,["^44","^13"],null,["^44","~:external-config"],null,["^44","~:tooling-config"],null,["^44","~:emit-constants"],null,["^44","~:load-tests"],null,["^44","~:infer-externs"],true,["^44","^15"],null,["~:js-options","~:js-provider"],"^L",["~:mode"],"~:dev",["^44","~:fn-invoke-direct"],null,["^44","~:source-map"],"/dev/null"]]]