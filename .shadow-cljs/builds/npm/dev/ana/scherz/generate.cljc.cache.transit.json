["^ ","~:output",["^ ","~:js","goog.provide('scherz.generate');\ngoog.require('cljs.core');\ngoog.require('scherz.util');\ngoog.require('scherz.dissonance');\ngoog.require('scherz.gravity');\ngoog.require('scherz.brightness');\n/**\n * Picks a chord from values that has the lowest combined score.\n */\nscherz.generate.apply_scores = (function scherz$generate$apply_scores(scores,values){\nvar combine_scores = (function() { \nvar G__6182__delegate = function (args){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$2((function (a,b){\nif(cljs.core.truth_(cljs.core.some(cljs.core.nil_QMARK_,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [a,b], null)))){\nreturn null;\n} else {\nreturn (a + b);\n}\n}),args);\n};\nvar G__6182 = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__6183__i = 0, G__6183__a = new Array(arguments.length -  0);\nwhile (G__6183__i < G__6183__a.length) {G__6183__a[G__6183__i] = arguments[G__6183__i + 0]; ++G__6183__i;}\n  args = new cljs.core.IndexedSeq(G__6183__a,0,null);\n} \nreturn G__6182__delegate.call(this,args);};\nG__6182.cljs$lang$maxFixedArity = 0;\nG__6182.cljs$lang$applyTo = (function (arglist__6184){\nvar args = cljs.core.seq(arglist__6184);\nreturn G__6182__delegate(args);\n});\nG__6182.cljs$core$IFn$_invoke$arity$variadic = G__6182__delegate;\nreturn G__6182;\n})()\n;\nvar cost = ((function (combine_scores){\nreturn (function (p__6156){\nvar vec__6157 = p__6156;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__6157,(0),null);\nvar score = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__6157,(1),null);\nif((score == null)){\nreturn scherz.util.infinity;\n} else {\nreturn score;\n}\n});})(combine_scores))\n;\nreturn cljs.core.first(scherz.util.min_by(cost,cljs.core.map.cljs$core$IFn$_invoke$arity$3(cljs.core.vector,values,cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.map,combine_scores,scores))));\n});\n/**\n * Returns all chords within a given tonic / scale.\n */\nscherz.generate.chord_set = (function scherz$generate$chord_set(tonic,scale){\nvar note_ct = cljs.core.count((scherz.util.scale_intervals.cljs$core$IFn$_invoke$arity$1 ? scherz.util.scale_intervals.cljs$core$IFn$_invoke$arity$1(scale) : scherz.util.scale_intervals.call(null,scale)));\nvar pitched_scale = scherz.brightness.pitch_scale(tonic,scale);\nvar iter__4523__auto__ = ((function (note_ct,pitched_scale){\nreturn (function scherz$generate$chord_set_$_iter__6160(s__6161){\nreturn (new cljs.core.LazySeq(null,((function (note_ct,pitched_scale){\nreturn (function (){\nvar s__6161__$1 = s__6161;\nwhile(true){\nvar temp__5735__auto__ = cljs.core.seq(s__6161__$1);\nif(temp__5735__auto__){\nvar xs__6292__auto__ = temp__5735__auto__;\nvar shape = cljs.core.first(xs__6292__auto__);\nvar iterys__4519__auto__ = ((function (s__6161__$1,shape,xs__6292__auto__,temp__5735__auto__,note_ct,pitched_scale){\nreturn (function scherz$generate$chord_set_$_iter__6160_$_iter__6162(s__6163){\nreturn (new cljs.core.LazySeq(null,((function (s__6161__$1,shape,xs__6292__auto__,temp__5735__auto__,note_ct,pitched_scale){\nreturn (function (){\nvar s__6163__$1 = s__6163;\nwhile(true){\nvar temp__5735__auto____$1 = cljs.core.seq(s__6163__$1);\nif(temp__5735__auto____$1){\nvar xs__6292__auto____$1 = temp__5735__auto____$1;\nvar degree = cljs.core.first(xs__6292__auto____$1);\nvar iterys__4519__auto__ = ((function (s__6163__$1,s__6161__$1,degree,xs__6292__auto____$1,temp__5735__auto____$1,shape,xs__6292__auto__,temp__5735__auto__,note_ct,pitched_scale){\nreturn (function scherz$generate$chord_set_$_iter__6160_$_iter__6162_$_iter__6164(s__6165){\nreturn (new cljs.core.LazySeq(null,((function (s__6163__$1,s__6161__$1,degree,xs__6292__auto____$1,temp__5735__auto____$1,shape,xs__6292__auto__,temp__5735__auto__,note_ct,pitched_scale){\nreturn (function (){\nvar s__6165__$1 = s__6165;\nwhile(true){\nvar temp__5735__auto____$2 = cljs.core.seq(s__6165__$1);\nif(temp__5735__auto____$2){\nvar s__6165__$2 = temp__5735__auto____$2;\nif(cljs.core.chunked_seq_QMARK_(s__6165__$2)){\nvar c__4521__auto__ = cljs.core.chunk_first(s__6165__$2);\nvar size__4522__auto__ = cljs.core.count(c__4521__auto__);\nvar b__6167 = cljs.core.chunk_buffer(size__4522__auto__);\nif((function (){var i__6166 = (0);\nwhile(true){\nif((i__6166 < size__4522__auto__)){\nvar inversion = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4521__auto__,i__6166);\ncljs.core.chunk_append(b__6167,(function (){var notes = scherz.util.base_chord(tonic,scale,shape,degree);\nvar root = (function (){var G__6168 = (degree - (1));\nreturn (pitched_scale.cljs$core$IFn$_invoke$arity$1 ? pitched_scale.cljs$core$IFn$_invoke$arity$1(G__6168) : pitched_scale.call(null,G__6168));\n})();\nvar pitches = scherz.brightness.pitch_chord(tonic,scale,shape,degree);\nvar type = scherz.util.chord_type(notes);\nreturn new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,\"scale\",\"scale\",-230427353),scale,new cljs.core.Keyword(null,\"tonic\",\"tonic\",-1692896630),tonic,new cljs.core.Keyword(null,\"inversion\",\"inversion\",-883042744),inversion,new cljs.core.Keyword(null,\"notes\",\"notes\",-1039600523),scherz.util.invert(notes,inversion),new cljs.core.Keyword(null,\"pitches\",\"pitches\",-2052174929),scherz.util.rotate(pitches,inversion),new cljs.core.Keyword(null,\"type\",\"type\",1174270348),(((type == null))?\"\":[cljs.core.str.cljs$core$IFn$_invoke$arity$1(root),cljs.core.name(type)].join(''))], null);\n})());\n\nvar G__6185 = (i__6166 + (1));\ni__6166 = G__6185;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__6167),scherz$generate$chord_set_$_iter__6160_$_iter__6162_$_iter__6164(cljs.core.chunk_rest(s__6165__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__6167),null);\n}\n} else {\nvar inversion = cljs.core.first(s__6165__$2);\nreturn cljs.core.cons((function (){var notes = scherz.util.base_chord(tonic,scale,shape,degree);\nvar root = (function (){var G__6169 = (degree - (1));\nreturn (pitched_scale.cljs$core$IFn$_invoke$arity$1 ? pitched_scale.cljs$core$IFn$_invoke$arity$1(G__6169) : pitched_scale.call(null,G__6169));\n})();\nvar pitches = scherz.brightness.pitch_chord(tonic,scale,shape,degree);\nvar type = scherz.util.chord_type(notes);\nreturn new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,\"scale\",\"scale\",-230427353),scale,new cljs.core.Keyword(null,\"tonic\",\"tonic\",-1692896630),tonic,new cljs.core.Keyword(null,\"inversion\",\"inversion\",-883042744),inversion,new cljs.core.Keyword(null,\"notes\",\"notes\",-1039600523),scherz.util.invert(notes,inversion),new cljs.core.Keyword(null,\"pitches\",\"pitches\",-2052174929),scherz.util.rotate(pitches,inversion),new cljs.core.Keyword(null,\"type\",\"type\",1174270348),(((type == null))?\"\":[cljs.core.str.cljs$core$IFn$_invoke$arity$1(root),cljs.core.name(type)].join(''))], null);\n})(),scherz$generate$chord_set_$_iter__6160_$_iter__6162_$_iter__6164(cljs.core.rest(s__6165__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});})(s__6163__$1,s__6161__$1,degree,xs__6292__auto____$1,temp__5735__auto____$1,shape,xs__6292__auto__,temp__5735__auto__,note_ct,pitched_scale))\n,null,null));\n});})(s__6163__$1,s__6161__$1,degree,xs__6292__auto____$1,temp__5735__auto____$1,shape,xs__6292__auto__,temp__5735__auto__,note_ct,pitched_scale))\n;\nvar fs__4520__auto__ = cljs.core.seq(iterys__4519__auto__(cljs.core.range.cljs$core$IFn$_invoke$arity$1(cljs.core.count(shape))));\nif(fs__4520__auto__){\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$2(fs__4520__auto__,scherz$generate$chord_set_$_iter__6160_$_iter__6162(cljs.core.rest(s__6163__$1)));\n} else {\nvar G__6186 = cljs.core.rest(s__6163__$1);\ns__6163__$1 = G__6186;\ncontinue;\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});})(s__6161__$1,shape,xs__6292__auto__,temp__5735__auto__,note_ct,pitched_scale))\n,null,null));\n});})(s__6161__$1,shape,xs__6292__auto__,temp__5735__auto__,note_ct,pitched_scale))\n;\nvar fs__4520__auto__ = cljs.core.seq(iterys__4519__auto__(cljs.core.range.cljs$core$IFn$_invoke$arity$2((1),(note_ct + (1)))));\nif(fs__4520__auto__){\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$2(fs__4520__auto__,scherz$generate$chord_set_$_iter__6160(cljs.core.rest(s__6161__$1)));\n} else {\nvar G__6187 = cljs.core.rest(s__6161__$1);\ns__6161__$1 = G__6187;\ncontinue;\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});})(note_ct,pitched_scale))\n,null,null));\n});})(note_ct,pitched_scale))\n;\nreturn iter__4523__auto__((scherz.util.chord_shapes.cljs$core$IFn$_invoke$arity$1 ? scherz.util.chord_shapes.cljs$core$IFn$_invoke$arity$1(note_ct) : scherz.util.chord_shapes.call(null,note_ct)));\n});\nscherz.generate.filter_chords = (function scherz$generate$filter_chords(scales,prev_chord,target_color){\nreturn cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (scale){\nvar target_color__$1 = (function (){var G__6170 = ((5) * target_color);\nreturn Math.round(G__6170);\n})();\nvar fs = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(target_color__$1,(0)))?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core._PLUS_], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core._PLUS_,cljs.core._], null));\nreturn cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(((function (target_color__$1,fs){\nreturn (function (f){\nreturn scherz.generate.chord_set(scherz.brightness.fifths_above(((function (){var G__6171 = scherz.brightness.scale_brightness.cljs$core$IFn$_invoke$arity$1(scale);\nvar G__6172 = target_color__$1;\nreturn (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6171,G__6172) : f.call(null,G__6171,G__6172));\n})() - scherz.brightness.scale_brightness.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"scale\",\"scale\",-230427353).cljs$core$IFn$_invoke$arity$1(prev_chord))),new cljs.core.Keyword(null,\"tonic\",\"tonic\",-1692896630).cljs$core$IFn$_invoke$arity$1(prev_chord)),scale);\n});})(target_color__$1,fs))\n,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([fs], 0));\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([scales], 0));\n});\n/**\n * With a set of scales, returns a function that takes in a dissonance value and\n * outputs a normalized dissonance value from 0 to 1.\n */\nscherz.generate.normalize_dissonance = (function scherz$generate$normalize_dissonance(scales){\nvar dissonance_vals = cljs.core.map.cljs$core$IFn$_invoke$arity$2(scherz.dissonance.chord_dissonance,cljs.core.map.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"notes\",\"notes\",-1039600523),cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(scherz.generate.chord_set,\"C\"),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([scales], 0))));\nvar min_dissonance = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.min,dissonance_vals);\nvar max_dissonance = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.max,dissonance_vals);\nvar diff = (max_dissonance - min_dissonance);\nreturn ((function (dissonance_vals,min_dissonance,max_dissonance,diff){\nreturn (function (dissonance){\nreturn ((dissonance - min_dissonance) / diff);\n});\n;})(dissonance_vals,min_dissonance,max_dissonance,diff))\n});\n/**\n * With a set of scales, returns a function that finds an appropriate following\n * chord from the previous chord and a set of tensions.\n */\nscherz.generate.next_chord = (function scherz$generate$next_chord(scales){\nvar normalize_dissonance = scherz.generate.normalize_dissonance(scales);\nreturn ((function (normalize_dissonance){\nreturn (function (prev,tension){\nvar tension__$1 = cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(tension,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"keywordize-keys\",\"keywordize-keys\",1310784252),new cljs.core.Keyword(null,\"true\",\"true\",-1114210334)], 0));\nvar map__6174 = tension__$1;\nvar map__6174__$1 = (((((!((map__6174 == null))))?(((((map__6174.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__6174.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__6174):map__6174);\nvar color = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__6174__$1,new cljs.core.Keyword(null,\"color\",\"color\",1011675173));\nvar dissonance = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__6174__$1,new cljs.core.Keyword(null,\"dissonance\",\"dissonance\",-752519630));\nvar gravity = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__6174__$1,new cljs.core.Keyword(null,\"gravity\",\"gravity\",-1815198225));\nvar chords = scherz.generate.filter_chords(scales,prev,color);\nvar score_color = ((function (tension__$1,map__6174,map__6174__$1,color,dissonance,gravity,chords,normalize_dissonance){\nreturn (function (chord){\nvar G__6176 = color;\nvar G__6177 = (function (){var G__6179 = scherz.brightness.chord_color(new cljs.core.Keyword(null,\"pitches\",\"pitches\",-2052174929).cljs$core$IFn$_invoke$arity$1(prev),new cljs.core.Keyword(null,\"pitches\",\"pitches\",-2052174929).cljs$core$IFn$_invoke$arity$1(chord));\nvar fexpr__6178 = ((function (G__6179,G__6176,tension__$1,map__6174,map__6174__$1,color,dissonance,gravity,chords,normalize_dissonance){\nreturn (function (p1__6173_SHARP_){\nreturn (p1__6173_SHARP_ / (5));\n});})(G__6179,G__6176,tension__$1,map__6174,map__6174__$1,color,dissonance,gravity,chords,normalize_dissonance))\n;\nreturn fexpr__6178(G__6179);\n})();\nreturn (scherz.util.abs_diff.cljs$core$IFn$_invoke$arity$2 ? scherz.util.abs_diff.cljs$core$IFn$_invoke$arity$2(G__6176,G__6177) : scherz.util.abs_diff.call(null,G__6176,G__6177));\n});})(tension__$1,map__6174,map__6174__$1,color,dissonance,gravity,chords,normalize_dissonance))\n;\nvar color_scores = cljs.core.map.cljs$core$IFn$_invoke$arity$2(score_color,chords);\nvar score_dissonance = cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(scherz.util.abs_diff,dissonance),normalize_dissonance,scherz.dissonance.chord_dissonance,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"notes\",\"notes\",-1039600523)], 0));\nvar dissonance_scores = cljs.core.map.cljs$core$IFn$_invoke$arity$2(score_dissonance,chords);\nvar score_gravity = ((function (tension__$1,map__6174,map__6174__$1,color,dissonance,gravity,chords,score_color,color_scores,score_dissonance,dissonance_scores,normalize_dissonance){\nreturn (function (chord){\nvar temp__5735__auto__ = scherz.gravity.chord_gravity(new cljs.core.Keyword(null,\"notes\",\"notes\",-1039600523).cljs$core$IFn$_invoke$arity$1(prev),new cljs.core.Keyword(null,\"notes\",\"notes\",-1039600523).cljs$core$IFn$_invoke$arity$1(chord));\nif(cljs.core.truth_(temp__5735__auto__)){\nvar g = temp__5735__auto__;\nvar x__4219__auto__ = (gravity - g);\nvar y__4220__auto__ = (0);\nreturn ((x__4219__auto__ > y__4220__auto__) ? x__4219__auto__ : y__4220__auto__);\n} else {\nreturn null;\n}\n});})(tension__$1,map__6174,map__6174__$1,color,dissonance,gravity,chords,score_color,color_scores,score_dissonance,dissonance_scores,normalize_dissonance))\n;\nvar gravity_scores = cljs.core.map.cljs$core$IFn$_invoke$arity$2(score_gravity,chords);\nreturn scherz.generate.apply_scores(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [color_scores,dissonance_scores,gravity_scores], null),chords);\n});\n;})(normalize_dissonance))\n});\n/**\n * Generates a set of chords that matches tension curves within the given scales.\n */\nscherz.generate.generate_progression = (function scherz$generate$generate_progression(var_args){\nvar G__6181 = arguments.length;\nswitch (G__6181) {\ncase 2:\nreturn scherz.generate.generate_progression.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn scherz.generate.generate_progression.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nscherz.generate.generate_progression.cljs$core$IFn$_invoke$arity$2 = (function (tensions,scales){\nreturn scherz.generate.generate_progression.cljs$core$IFn$_invoke$arity$3(tensions,scales,\"C\");\n});\n\nscherz.generate.generate_progression.cljs$core$IFn$_invoke$arity$3 = (function (tensions,scales,start_tonic){\nvar scales__$1 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.keyword,scales);\nreturn cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(scherz.generate.next_chord(scales__$1),cljs.core.first(scherz.generate.chord_set(start_tonic,cljs.core.first(scales__$1))),tensions);\n});\n\nscherz.generate.generate_progression.cljs$lang$maxFixedArity = 3;\n\n/**\n * Places every chord in a progression between octaves 5 and 6.\n */\nscherz.generate.voice_progression = (function scherz$generate$voice_progression(progression){\nvar voice_chord = (function (chord,octave){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(chord,new cljs.core.Keyword(null,\"notes\",\"notes\",-1039600523),cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core._PLUS_,(octave * (12))),scherz.gravity.compress(new cljs.core.Keyword(null,\"notes\",\"notes\",-1039600523).cljs$core$IFn$_invoke$arity$1(chord))));\n});\nvar optimal_voicing = ((function (voice_chord){\nreturn (function (prev,chord){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(chord,new cljs.core.Keyword(null,\"notes\",\"notes\",-1039600523),scherz.util.max_by(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(scherz.gravity.chord_gravity,new cljs.core.Keyword(null,\"notes\",\"notes\",-1039600523).cljs$core$IFn$_invoke$arity$1(prev)),cljs.core.map.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"notes\",\"notes\",-1039600523),cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(voice_chord,chord),cljs.core.list((5),(6))))));\n});})(voice_chord))\n;\nreturn cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(optimal_voicing,voice_chord(cljs.core.first(progression),(5)),cljs.core.rest(progression));\n});\n/**\n * Dedupes pitches and notes in a chord progression.\n */\nscherz.generate.clean_progression = (function scherz$generate$clean_progression(progression){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (chord){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(chord,scherz.util.map_vals((function (_,v){\nreturn cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1(v);\n}),cljs.core.select_keys(chord,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"notes\",\"notes\",-1039600523),new cljs.core.Keyword(null,\"pitches\",\"pitches\",-2052174929)], null))));\n}),progression);\n});\nscherz.generate.main = cljs.core.comp.cljs$core$IFn$_invoke$arity$3(scherz.generate.clean_progression,scherz.generate.voice_progression,scherz.generate.generate_progression);\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","scherz/generate.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",20],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$scherz.generate","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$scherz.dissonance","^G","~$u","~$scherz.util","~$scherz.brightness","^I","~$cljs.core","^J","~$goog","^K","^H","^H","~$g","~$scherz.gravity","~$b","^I","^L","^L","~$d","^G"],"~:seen",["^@",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^H","^H","~$u","^H","^J","^J"],"~:form",["~#list",["~$ns","^B",["^R",["^N",["^H","~:as","~$u","~:include-macros",true],["^G","^T","~$d"],["^L","^T","~$g"],["^I","^T","~$b"]]]]],"~:flags",["^ ","^N",["^@",[]]],"~:js-deps",["^ "],"~:deps",["^K","^J","^H","^G","^L","^I"]],"^D","^B","~:resource-id",["~:shadow.build.classpath/resource","scherz/generate.cljc"],"~:compiled-at",1566688691320,"~:resource-name","scherz/generate.cljc","~:warnings",[],"~:source","(ns scherz.generate\n  (:require #?(:clj [scherz.util :as u]\n               :cljs [scherz.util :as u :include-macros true])\n            [scherz.dissonance :as d]\n            [scherz.gravity :as g]\n            [scherz.brightness :as b]))\n\n(defn- apply-scores\n  \"Picks a chord from values that has the lowest combined score.\"\n  [scores values]\n  (let [combine-scores (fn [& args] (reduce (u/fwhen [a b] (+ a b)) args))\n        cost (fn [[_ score]]\n               (if (nil? score) u/infinity score))]\n    (->> scores\n         (apply map combine-scores)\n         (map vector values)\n         (u/min-by cost)\n         first)))\n\n(defn chord-set\n  \"Returns all chords within a given tonic / scale.\"\n  [tonic scale]\n  (let [note-ct (count (u/scale-intervals scale))\n        pitched-scale (b/pitch-scale tonic scale)]\n    (for [shape (u/chord-shapes note-ct)\n          degree (range 1 (inc note-ct))\n          inversion (range (count shape))]\n      (let [notes (u/base-chord tonic scale shape degree)\n            root (pitched-scale (dec degree))\n            pitches (b/pitch-chord tonic scale shape degree)\n            type (u/chord-type notes)]\n        {:scale scale :tonic tonic :inversion inversion\n         :notes (u/invert notes inversion)\n         :pitches (u/rotate pitches inversion)\n         :type (if (nil? type) \"\" (str root (name type)))}))))\n\n(defn- filter-chords\n  ; for some reason for comprehension doesn't flatten all the way\n  [scales prev-chord target-color]\n  (mapcat (fn [scale]\n            (let [target-color (Math/round (double (* 5 target-color)))\n                  fs (if (= target-color 0) [+] [+ -])]\n              (mapcat (fn [f]\n                        (-> (b/scale-brightness scale)\n                            (f target-color)\n                            (- (b/scale-brightness (:scale prev-chord)))\n                            (b/fifths-above (:tonic prev-chord))\n                            (chord-set scale)))\n                      fs)))\n          scales))\n\n(defn- normalize-dissonance\n  \"With a set of scales, returns a function that takes in a dissonance value and\n   outputs a normalized dissonance value from 0 to 1.\"\n  [scales]\n  (let [dissonance-vals (->> scales\n                             (mapcat (partial chord-set \"C\"))\n                             (map :notes)\n                             (map d/chord-dissonance))\n        min-dissonance (apply min dissonance-vals)\n        max-dissonance (apply max dissonance-vals)\n        diff (- max-dissonance min-dissonance)]\n    (fn [dissonance] (-> dissonance (- min-dissonance) (/ diff)))))\n\n(defn- next-chord\n  \"With a set of scales, returns a function that finds an appropriate following\n   chord from the previous chord and a set of tensions.\"\n  [scales]\n  (let [normalize-dissonance (normalize-dissonance scales)]\n    (fn [prev tension]\n      (let [tension #?(:clj tension\n                       :cljs (js->clj tension :keywordize-keys :true))\n            {:keys [color dissonance gravity]} tension\n            chords (filter-chords scales prev color)\n            score-color (fn [chord]\n                          (->> (:pitches chord)\n                               (b/chord-color (:pitches prev))\n                               (#(/ % 5))\n                               (u/abs-diff color)))\n            color-scores (map score-color chords)\n            score-dissonance (comp (partial u/abs-diff dissonance)\n                                   normalize-dissonance\n                                   d/chord-dissonance\n                                   :notes)\n            dissonance-scores (map score-dissonance chords)\n            score-gravity (fn [chord]\n                            (when-let [g (g/chord-gravity (:notes prev)\n                                                          (:notes chord))]\n                              (max (- gravity g) 0)))\n            gravity-scores (map score-gravity chords)]\n        (apply-scores [color-scores dissonance-scores gravity-scores]\n                      chords)))))\n\n(defn generate-progression\n  \"Generates a set of chords that matches tension curves within the given scales.\"\n  ([tensions scales] (generate-progression tensions scales \"C\"))\n  ([tensions scales start-tonic]\n   (let [scales #?(:clj scales\n                   :cljs (map keyword scales))]\n     (reductions (next-chord scales)\n                 (first (chord-set start-tonic (first scales)))\n                 tensions))))\n\n(defn voice-progression\n  \"Places every chord in a progression between octaves 5 and 6.\"\n  [progression]\n  (let [voice-chord (fn [chord octave]\n                      (->> (:notes chord)\n                           g/compress\n                           (map (partial + (* octave 12)))\n                           (assoc chord :notes)))\n        optimal-voicing (fn [prev chord]\n                          (->> '(5 6)\n                               (map (partial voice-chord chord))\n                               (map :notes)\n                               (u/max-by (partial g/chord-gravity (:notes prev)))\n                               (assoc chord :notes)))]\n    (reductions optimal-voicing\n                (voice-chord (first progression) 5)\n                (rest progression))))\n\n(defn clean-progression\n  \"Dedupes pitches and notes in a chord progression.\"\n  [progression]\n  (map (fn [chord]\n         (->> (select-keys chord [:notes :pitches])\n              (u/map-vals (fn [_ v] (dedupe v)))\n              (into chord)))\n       progression))\n\n(def main (comp clean-progression voice-progression generate-progression))\n\n; (main [{:color 0.4 :dissonance 0.8 :gravity 0.2}] [:lydian])\n\n","~:reader-features",["^@",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["scherz.generate/apply-scores","scores","values","combine-scores","args","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/some","cljs.core/nil?","a","b","cost","p__6156","vec__6157","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","_","score","scherz.util/infinity","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/map","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core/vector","scherz.util/min-by","cljs.core/first","scherz.generate/chord-set","tonic","scale","note-ct","cljs.core/count","scherz.util/scale-intervals","pitched-scale","scherz.brightness/pitch-scale","iter__4523__auto__","s__6161","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","iterys__4519__auto__","s__6163","s__6165","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","b__6167","cljs.core/chunk-buffer","i__6166","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__6164","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4520__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__6162","iter__6160","shape","scherz.util/chord-shapes","degree","cljs.core.range.cljs$core$IFn$_invoke$arity$2","inversion","cljs.core.range.cljs$core$IFn$_invoke$arity$1","notes","scherz.util/base-chord","root","G__6168","G__6169","pitches","scherz.brightness/pitch-chord","type","scherz.util/chord-type","scherz.util/invert","scherz.util/rotate","cljs.core/name","scherz.generate/filter-chords","scales","prev-chord","target-color","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","G__6170","Math/round","fs","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/+","cljs.core/-","f","scherz.brightness.scale_brightness.cljs$core$IFn$_invoke$arity$1","G__6171","G__6172","scherz.brightness/fifths-above","scherz.generate/normalize-dissonance","dissonance-vals","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","scherz.dissonance/chord-dissonance","min-dissonance","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/min","max-dissonance","cljs.core/max","diff","dissonance","scherz.generate/next-chord","normalize-dissonance","prev","tension","map__6174","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic","color","gravity","chords","score-color","chord","scherz.brightness/chord-color","G__6179","fexpr__6178","p1__6173#","G__6176","G__6177","scherz.util/abs-diff","color-scores","score-dissonance","cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic","dissonance-scores","score-gravity","g","scherz.gravity/chord-gravity","x__4219__auto__","y__4220__auto__","gravity-scores","var_args","G__6181","scherz.generate/generate-progression","js/Error","tensions","scherz.generate.generate_progression.cljs$core$IFn$_invoke$arity$3","start-tonic","cljs.core/keyword","cljs.core.reductions.cljs$core$IFn$_invoke$arity$3","scherz.generate/voice-progression","progression","voice-chord","octave","scherz.gravity/compress","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","optimal-voicing","scherz.util/max-by","scherz.generate/clean-progression","cljs.core/select-keys","scherz.util/map-vals","v","cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1","cljs.core.into.cljs$core$IFn$_invoke$arity$2","scherz.generate/main","cljs.core.comp.cljs$core$IFn$_invoke$arity$3","cljs.core/chunk-first"]]],"~:cache-keys",["~#cmap",[["^Z","goog/math/math.js"],[1565449510000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^@",[]],"~:deps-syms",["^K","~$goog.array","~$goog.asserts"]]],["^Z","goog/array/array.js"],[1565449510000,"^1;",["^ ","^1<",null,"^1=",["^@",[]],"^1>",["^K","^1@"]]],["^Z","goog/debug/error.js"],[1565449510000,"^1;",["^ ","^1<",null,"^1=",["^@",[]],"^1>",["^K"]]],["^Z","goog/dom/nodetype.js"],[1565449510000,"^1;",["^ ","^1<",null,"^1=",["^@",[]],"^1>",["^K"]]],["^Z","goog/object/object.js"],[1565449510000,"^1;",["^ ","^1<",null,"^1=",["^@",[]],"^1>",["^K"]]],"~:SHADOW-TIMESTAMP",[1565449511000,1565449509000],["^Z","scherz/gravity.cljc"],[1566688642000,"^1;",["^ ","^1<",null,"^1=",["^@",[]],"^1>",["^K","^J","^H"]]],["^Z","goog/math/long.js"],[1565449510000,"^1;",["^ ","^1<",null,"^1=",["^@",[]],"^1>",["^K","^1@","~$goog.reflect"]]],["^Z","goog/string/internal.js"],[1565449510000,"^1;",["^ ","^1<",null,"^1=",["^@",[]],"^1>",["^K"]]],["^Z","goog/functions/functions.js"],[1565449510000,"^1;",["^ ","^1<",null,"^1=",["^@",[]],"^1>",["^K"]]],["^Z","goog/structs/map.js"],[1565449510000,"^1;",["^ ","^1<",null,"^1=",["^@",[]],"^1>",["^K","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^Z","scherz/generate.cljc"],[1566688674000,"^1;",["^ ","^1<",null,"^1=",["^@",[]],"^1>",["^K","^J","^H","^G","^L","^I"]]],["^Z","scherz/dissonance.cljc"],[1566685122000,"^1;",["^ ","^1<",null,"^1=",["^@",[]],"^1>",["^K","^J","^H"]]],["^Z","goog/asserts/asserts.js"],[1565449510000,"^1;",["^ ","^1<",null,"^1=",["^@",[]],"^1>",["^K","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^Z","goog/uri/uri.js"],[1565449510000,"^1;",["^ ","^1<",null,"^1=",["^@",[]],"^1>",["^K","^1?","^1@","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^Z","goog/base.js"],[1565449510000,"^1;",["^ ","^1<",null,"^1=",["^@",[]],"^1>",[]]],["^Z","goog/structs/structs.js"],[1565449510000,"^1;",["^ ","^1<",null,"^1=",["^@",[]],"^1>",["^K","^1?","~$goog.object"]]],["^Z","clojure/string.cljs"],[1565449509000,"^1;",["^ ","^1<",null,"^1=",["^@",[]],"^1>",["^K","^J","^1G","~$goog.string.StringBuffer"]]],["^Z","goog/string/string.js"],[1565449510000,"^1;",["^ ","^1<",null,"^1=",["^@",[]],"^1>",["^K","~$goog.string.internal"]]],["^Z","goog/reflect/reflect.js"],[1565449510000,"^1;",["^ ","^1<",null,"^1=",["^@",[]],"^1>",["^K"]]],["^Z","goog/string/stringbuffer.js"],[1565449510000,"^1;",["^ ","^1<",null,"^1=",["^@",[]],"^1>",["^K"]]],["^Z","goog/iter/iter.js"],[1565449510000,"^1;",["^ ","^1<",null,"^1=",["^@",[]],"^1>",["^K","^1?","^1@","~$goog.functions","~$goog.math"]]],["^Z","scherz/brightness.cljc"],[1566688545000,"^1;",["^ ","^1<",null,"^1=",["^@",[]],"^1>",["^K","^J","~$clojure.string","^H"]]],["^Z","cljs/core.cljs"],[1565449509000,"^1;",["^ ","^1<",null,"^1=",["^@",[]],"^1>",["~$goog.math.Long","~$goog.math.Integer","^1G","^1M","^1?","~$goog.Uri","^1N"]]],["^Z","goog/math/integer.js"],[1565449510000,"^1;",["^ ","^1<",null,"^1=",["^@",[]],"^1>",["^K"]]],["^Z","goog/uri/utils.js"],[1565449510000,"^1;",["^ ","^1<",null,"^1=",["^@",[]],"^1>",["^K","^1?","^1@","^1G"]]],["^Z","scherz/util.cljc"],[1566685118000,"^1;",["^ ","^1<",null,"^1=",["^@",[]],"^1>",["^K","^J"]]]]],"~:clj-info",["^ ","jar:file:/Users/mochi/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1565449508000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1565449509000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1565449509000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1565449509000,"jar:file:/Users/mochi/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1565449508000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1565449509000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1565449509000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1565449508000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1565449509000,"jar:file:/Users/mochi/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1565449508000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1565449508000,"jar:file:/Users/mochi/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1565449508000,"jar:file:/Users/mochi/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1565449508000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1565449509000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1565449509000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1565449508000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1565449508000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1565449509000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1565449509000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1565449508000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1565449508000,"file:/Users/mochi/Documents/recurse/scherz/src/main/scherz/util.cljc",1566685118000,"jar:file:/Users/mochi/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1565449509000,"jar:file:/Users/mochi/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1565033122000,"jar:file:/Users/mochi/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1565449508000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","scherz/generate.cljc","^7",1,"^8",5,"^9",1,"^:",20],"^;",["^ ","^<","^="],"^>",null,"^?",["^@",[]],"^A","^B","^E",null,"^F",["^ ","^G","^G","~$u","^H","^I","^I","^J","^J","^K","^K","^H","^H","~$g","^L","~$b","^I","^L","^L","~$d","^G"],"^M",["^@",["^N"]],"~:shadow/js-access-global",["^@",["Error"]],"^O",null,"~:defs",["^ ","~$apply-scores",["^ ","~:protocol-inline",null,"^5",["^ ","^6","scherz/generate.cljc","^7",8,"^8",8,"^9",8,"^:",20,"~:private",true,"~:arglists",["^R",["~$quote",["^R",[["~$scores","~$values"]]]]],"~:doc","Picks a chord from values that has the lowest combined score."],"^2I",true,"^A","~$scherz.generate/apply-scores","^6","scherz/generate.cljc","^:",20,"~:method-params",["^R",[["^2L","^2M"]]],"~:protocol-impl",null,"~:arglists-meta",["^R",[null,null]],"^8",1,"~:variadic?",false,"^7",8,"~:ret-tag",["^@",["~$any","~$clj-nil"]],"^9",8,"~:max-fixed-arity",2,"~:fn-var",true,"^2J",["^R",["^2K",["^R",[["^2L","^2M"]]]]],"^2N","Picks a chord from values that has the lowest combined score."],"~$main",["^ ","^A","~$scherz.generate/main","^6","scherz/generate.cljc","^7",131,"^8",1,"^9",131,"^:",10,"^5",["^ ","^6","scherz/generate.cljc","^7",131,"^8",6,"^9",131,"^:",10],"~:tag","~$function"],"~$voice-progression",["^ ","^2H",null,"^5",["^ ","^6","scherz/generate.cljc","^7",104,"^8",7,"^9",104,"^:",24,"^2J",["^R",["^2K",["^R",[["~$progression"]]]]],"^2N","Places every chord in a progression between octaves 5 and 6."],"^A","~$scherz.generate/voice-progression","^6","scherz/generate.cljc","^:",24,"^2P",["^R",[["^32"]]],"^2Q",null,"^2R",["^R",[null,null]],"^8",1,"^2S",false,"^7",104,"^2T","~$clj","^9",104,"^2W",1,"^2X",true,"^2J",["^R",["^2K",["^R",[["^32"]]]]],"^2N","Places every chord in a progression between octaves 5 and 6."],"~$generate-progression",["^ ","^2H",null,"^5",["^ ","^6","scherz/generate.cljc","^7",94,"^8",7,"^9",94,"^:",27,"^2J",["^R",["^2K",["^R",[["~$tensions","~$scales"],["^36","^37","~$start-tonic"]]]]],"^2N","Generates a set of chords that matches tension curves within the given scales.","~:top-fn",["^ ","^2S",false,"~:fixed-arity",3,"^2W",3,"^2P",["^R",[["^36","^37"],["^36","^37","^38"]]],"^2J",["^R",[["^36","^37"],["^36","^37","^38"]]],"^2R",["^R",[null,null]]]],"^A","~$scherz.generate/generate-progression","^6","scherz/generate.cljc","^:",27,"^39",["^ ","^2S",false,"^3:",3,"^2W",3,"^2P",["^R",[["^36","^37"],["^36","^37","^38"]]],"^2J",["^R",[["^36","^37"],["^36","^37","^38"]]],"^2R",["^R",[null,null]]],"^2P",["^R",[["^36","^37"],["^36","^37","^38"]]],"^2Q",null,"^3:",3,"^2R",["^R",[null,null]],"^8",1,"^2S",false,"~:methods",[["^ ","^3:",2,"^2S",false,"^2[","^2U"],["^ ","^3:",3,"^2S",false,"^2[","^34"]],"^7",94,"^9",94,"^2W",3,"^2X",true,"^2J",["^R",[["^36","^37"],["^36","^37","^38"]]],"^2N","Generates a set of chords that matches tension curves within the given scales."],"~$chord-set",["^ ","^2H",null,"^5",["^ ","^6","scherz/generate.cljc","^7",20,"^8",7,"^9",20,"^:",16,"^2J",["^R",["^2K",["^R",[["~$tonic","~$scale"]]]]],"^2N","Returns all chords within a given tonic / scale."],"^A","~$scherz.generate/chord-set","^6","scherz/generate.cljc","^:",16,"^2P",["^R",[["^3>","^3?"]]],"^2Q",null,"^2R",["^R",[null,null]],"^8",1,"^2S",false,"^7",20,"^2T","~$cljs.core/LazySeq","^9",20,"^2W",2,"^2X",true,"^2J",["^R",["^2K",["^R",[["^3>","^3?"]]]]],"^2N","Returns all chords within a given tonic / scale."],"~$filter-chords",["^ ","^2H",null,"^5",["^ ","^6","scherz/generate.cljc","^7",37,"^8",8,"^9",37,"^:",21,"^2I",true,"^2J",["^R",["^2K",["^R",[["^37","~$prev-chord","~$target-color"]]]]]],"^2I",true,"^A","~$scherz.generate/filter-chords","^6","scherz/generate.cljc","^:",21,"^2P",["^R",[["^37","^3C","^3D"]]],"^2Q",null,"^2R",["^R",[null,null]],"^8",1,"^2S",false,"^7",37,"^2T","^2U","^9",37,"^2W",3,"^2X",true,"^2J",["^R",["^2K",["^R",[["^37","^3C","^3D"]]]]]],"~$normalize-dissonance",["^ ","^2H",null,"^5",["^ ","^6","scherz/generate.cljc","^7",52,"^8",8,"^9",52,"^:",28,"^2I",true,"^2J",["^R",["^2K",["^R",[["^37"]]]]],"^2N","With a set of scales, returns a function that takes in a dissonance value and\n   outputs a normalized dissonance value from 0 to 1."],"^2I",true,"^A","~$scherz.generate/normalize-dissonance","^6","scherz/generate.cljc","^:",28,"^2P",["^R",[["^37"]]],"^2Q",null,"^2R",["^R",[null,null]],"^8",1,"^2S",false,"^7",52,"^2T","^30","^9",52,"^2W",1,"^2X",true,"^2J",["^R",["^2K",["^R",[["^37"]]]]],"^2N","With a set of scales, returns a function that takes in a dissonance value and\n   outputs a normalized dissonance value from 0 to 1."],"~$clean-progression",["^ ","^2H",null,"^5",["^ ","^6","scherz/generate.cljc","^7",122,"^8",7,"^9",122,"^:",24,"^2J",["^R",["^2K",["^R",[["^32"]]]]],"^2N","Dedupes pitches and notes in a chord progression."],"^A","~$scherz.generate/clean-progression","^6","scherz/generate.cljc","^:",24,"^2P",["^R",[["^32"]]],"^2Q",null,"^2R",["^R",[null,null]],"^8",1,"^2S",false,"^7",122,"^2T","^3A","^9",122,"^2W",1,"^2X",true,"^2J",["^R",["^2K",["^R",[["^32"]]]]],"^2N","Dedupes pitches and notes in a chord progression."],"~$next-chord",["^ ","^2H",null,"^5",["^ ","^6","scherz/generate.cljc","^7",65,"^8",8,"^9",65,"^:",18,"^2I",true,"^2J",["^R",["^2K",["^R",[["^37"]]]]],"^2N","With a set of scales, returns a function that finds an appropriate following\n   chord from the previous chord and a set of tensions."],"^2I",true,"^A","~$scherz.generate/next-chord","^6","scherz/generate.cljc","^:",18,"^2P",["^R",[["^37"]]],"^2Q",null,"^2R",["^R",[null,null]],"^8",1,"^2S",false,"^7",65,"^2T","^30","^9",65,"^2W",1,"^2X",true,"^2J",["^R",["^2K",["^R",[["^37"]]]]],"^2N","With a set of scales, returns a function that finds an appropriate following\n   chord from the previous chord and a set of tensions."]],"^P",["^ ","^H","^H","~$u","^H","^J","^J"],"~:cljs.analyzer/constants",["^ ","^M",["^@",["~:true","~:color","~:scale","~:inversion","~:tonic","~:type","~:gravity","~:pitches","~:dissonance","~:notes","~:keywordize-keys"]],"~:order",["^3O","^3Q","^3P","^3V","^3T","^3R","^3W","^3M","^3N","^3U","^3S"]],"^V",["^ ","^N",["^@",[]]],"^W",["^ "],"^X",["^K","^J","^H","^G","^L","^I"]],"^D","^B","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1:",[["^3[","~:static-fns"],true,["^3[","~:elide-asserts"],false,["^3[","~:optimize-constants"],null,["^3[","^11"],null,["^3[","~:external-config"],null,["^3[","~:tooling-config"],null,["^3[","~:emit-constants"],null,["^3[","~:load-tests"],null,["^3[","~:infer-externs"],true,["^3[","^13"],null,["~:js-options","~:js-provider"],"^N",["~:mode"],"~:dev",["^3[","~:fn-invoke-direct"],null,["^3[","~:source-map"],"/dev/null"]]]